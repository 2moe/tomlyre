get-opts = "Λήψη της τιμής που αντιστοιχεί στη δοσμένη ρύθμιση"
get-opts-help = """
Παράδειγμα χρήσης 1: `get Cargo.toml -k package.name`
Παράδειγμα χρήσης 2: `get cfg.yaml -k .`
"""
key = "Αναζήτηση της τιμής με βάση το κλειδί"

key-help = """
Η μορφή είναι: "a.b.c", όνομα υποπίνακα ή δείκτης πίνακας συνδέονται με ".".
Όταν χρησιμοποιείτε μόνο ένα ".", επιστρέφει ολόκληρο τον υποπίνακα"""

set-opts = "Δημιουργία/ενημέρωση/διαγραφή δομής αρχείου ρυθμίσεων"
set-opts-help = """
# set

Επιλέξτε μία ρύθμιση με βάση το κλειδί και μετά τροποποιήστε την χρησιμοποιώντας μία τιμή της δοθείσας περίπτωσης.

> Όταν δεν δοθεί τιμή για τη ρύθμιση, αλλά δοθεί μόνο το κλειδί, επιστρέφει πληροφορίες σχετικά με τον τύπο της ρύθμισης και την τιμή της.
> Για παράδειγμα, `set Cargo.toml -k package` επιστρέφει μία λεπτομερή περιγραφή του πίνακα 'package' και των υποπινάκων του, παρέχοντας περισσότερες πληροφορίες από την εντολή `get`.

## Παραδείγματα

### Παράδειγμα 1:
```sh
--ts md set test.toml --key package.edition --str 2021
```

Δεδομένου ότι δόθηκε `--str` αντί για `--int`, το "2021" είναι τύπου string, όχι integer.

| package | νέα τιμή |
|---------|-----------|
| edition | "2021"    |


```toml
[package]
edition = "2021"
```

### Παράδειγμα 2:
```sh
set ~/.config/Code/User/settings.json --ck remote.SSH.remotePlatform --ck test --map k1 v1 --to /tmp/code.yaml
```

```yaml
remote.SSH.remotePlatform:
  test:
    k1: v1
```

### Παράδειγμα 3:

```sh
set test.yml -k main -a hello -a wonderful -a world --pre --to ron --save
```

```ron
"main": [
  /*[0]: Αυτή είναι η πρώτη είσοδος*/ "hello",
  /*[1]*/ "wonderful",
  /*[2]*/ "world",
]
```

> Σημείωση: Οι παραπάνω παραδείγματα ξεκινούν με όρους (argument)/ υπο-εντολές (sub-command) και παραλείπουν το όνομα της βασικής εντολής, στην πραγματικότητα θα πρέπει να προσθέσετε το όνομα αυτό χειροκίνητα."""

set-kv = "Ορισμός ζεύγους κλειδιού-τιμής (k-v)，`--kv x.y.z value` αντιστοιχεί σε `-k x.y.z -s value`"

set-key = """Επιλέξτε ένα συγκεκριμένο κλειδί (key), χρησιμοποιώντας το "." ως διαχωριστικό"""

concat-key = """Διαχωρισμός του κλειδιού σε τμήματα, τα οποία θα ενωθούν αυτόματα στο τέλος"""
concat-key-help = """
Η διαφορά με το `-k` είναι ότι το `--ck` δεν θα διαχωρίσει αυτόματα το κλειδί στα ".". 
Για παράδειγμα, για το [a.b.c], το `-k a.b.c` και το `--ck a --ck b --ck c` είναι ισοδύναμα. 
Σε απλές περιπτώσεις, το `-k` είναι πιο εύχρηστο.

Εάν το όνομα του κλειδιού περιέχει '.' χρησιμοποιήστε το `--ck` αντί για `-k`. 
Για παράδειγμα:

```json
"[typescript]": {
    "editor.defaultFormatter": "rome.rome"
}
```

Σε αυτήν τη δομή, το "editor.defaultFormatter" είναι μια πλήρης συμβολοσειρά, η "defaultFormatter" δεν είναι ένα υπο-κλειδί (sub-key) του "editor".

Όταν χρησιμοποιείτε το `-k '[typescript]'.'editor.defaultFormatter'`, θα χωρίσει το κλειδί σε:

- "[typescript]"
- "editor"
- "defaultFormatter"

Το να χρησιμοποιήσετε `--ck '[typescript]' --ck editor.defaultFormatter`, θα διαχωρίσει το κλειδί ως:

- "[typescript]"
- "editor.defaultFormatter"

Αυτό το δεύτερο είναι το σωστό σχήμα."""

preview = "Προεπισκόπηση του πλήρους αρχείου μετά την ολοκλήρωση των αλλαγών"
string = "String (τύπος συμβολοσειράς)"
bool = "bool (λογικός τύπος), μπορεί να είναι μόνο `true` ή `false`"
num = "i64: 64bit ακέραιος τύπος, για παράδειγμα: 1145"
f64 = "Διπλής ακρίβειας κινητής υποδιαστολής (IEEE 754-2008 πρότυπο), για παράδειγμα: 3.14159265359"

set-save-to-help = """
Είναι παρόμοιο με το `-t` της υπο-εντολής `conv`, η μεγαλύτερη διαφορά είναι ότι το `-t` του `conv` μπορεί να κληθεί πολλές φορές σε σειρά, για να παράξει πολλαπλά αρχεία σε διαφορετικά φορμάτ. Αντίθετα, το `-t` της υπο-εντολής `set` μπορεί να κληθεί μόνο μία φορά και μόνο ένα αρχείο μπορεί να παρουσιαστεί σε αυτό.

>Σημείωση: Μετά την εκτέλεση της λειτουργίας μετατροπής της υπο-εντολής `conv`, όλα τα αρχεία χάνουν τα σχόλια τους.
> Αντίθετα, η υπο-εντολή `set` διατηρεί τα σχόλια **των αρχείων toml**, όπως και τα αρχεία σε άλλα φορματ **δεν διατηρούν** τα σχόλια τους.

- Αν δεν έχει κληθεί το `-t`, το `--save` θα αντικαταστήσει το ίδιο το αρχείο.
- Αν έχει κληθεί το `-t` και ο χρήστης έχει επιλέξει `--save`, τότε το τροποποιημένο αρχείο θα αποθηκευτεί στο αρχείο που καθορίζεται από το `-t`.

- Εκτός αν το αρχείο προέλευσης και αυτό που καθορίζεται με το `-t` δεν είναι το ίδιο, τότε το `-t` της υπο-εντολής `set` λειτουργεί όπως και το `-t` της υπο-εντολής `conv`, και συγκεκριμένα αναφέρεται σε μη συγκεκριμένα ονόματα αρχείων.
  - Για παράδειγμα, αν το αρχείο `from` είναι **test.yml** και το αρχείο `to` είναι **json**, τότε το αποτέλεσμα θα είναι το **test.json**, όχι απλά **json**.
  - Εάν δεν θέλετε αυτήν τη λειτουργία, τότε χρησιμοποιήστε `-t ./json` ή `-t $PWD/json`, αντί για `-t json`."""

set-save = "Εάν καλεστεί χωρίς τη συνοδευτική επιλογή `--to`, αντικαθιστά (overwrite) το τρέχον αρχείο"
set-save-to = "Αποθηκεύει σε συγκεκριμένο φορμάτ/αρχείο, μόνο ένα αρχείο μπορεί να αποθηκευτεί κάθε φορά."
array = "Πίνακας συμβολοσειρών (string array)"
array-help = """
Χρησιμοποιήστε την παράμετρο `-a` για να ορίσετε τα στοιχεία του πίνακα.
Παράδειγμα:
```sh
set test.toml -k test.array -a hello -a wonderful -a world
```

> Ορίζει το στοιχείο με δείκτη 0 στην πρώτη κλήση, το στοιχείο με δείκτη 1 στη δεύτερη κλήση και ούτω καθεξής.

```toml
[test]
array = ["hello", "wonderful", "world"]
```"""

num-arr = "Πίνακας ακεραίων i64"
num-arr-help = """
Παράδειγμα:
```sh
set test.json -k hello --na -1 --na -45 --na 14
```

```json
"hello": [
    -1,
    -45,
    14
]
```"""

f64-arr = "Πίνακας διπλής ακρίβειας κινητής υποδιαστολής (f64)"
f64-arr-help = """
Παράδειγμα:
```sh
set test.yml -k hello --fa 3.14 --fa 45e-2 --fa NaN --fa Inf
```

```yaml
hello:
- 3.14
- 0.45
- .nan
- .inf
```

> Το json 1.0 δεν υποστηρίζει NaN και Inf, επομένως τυπώνει `null` αντί για `NaN`.

```sh
set test.yml -k zz --fa NaN --fa Inf --to json --pre
```

```json
"zz": [
    null,
    null
]
```
"""

bool-arr = "Πίνακας boolean (bool)"
bool-arr-help = """
Παράδειγμα:
```sh
set test.ron -k hello --ba true --ba false --ba true
```

```ron
"hello": [
    // [0]: το πρώτο στοιχείο είναι true
    true,
    /*[1]*/ false,
    /*[2]*/ true,
]
```"""

aot = "Πίνακας πινάκων με διάφορα κλειδιά (array of tables – AOT). Χρησιμοποιήστε την παράμετρο `--aot 'k1, v1, k2, v2'` για να ορίσετε τα στοιχεία του πίνακα"
aot-help = """
Παράδειγμα:
```sh
set test.toml -k package --aot 'name, glossa, version, 0.0.1-alpha.6' --aot 'name, wasm-bindgen, ver sion, 0.2  .84,  version, 0.2.84'
```

```toml
[[package]]
name = "glossa"
version = "0.0.1-alpha.6"

[[package]]
name = "wasm-bindgen"
"ver sion" = "0.2  .84"
version = "0.2.84"
```"""

saot = "Πίνακας με μοναδικές τιμές (single-array-of-tables, SAOT). Χρησιμοποιήστε την παράμετρο `--saot k1 v1` για να ορίσετε τα στοιχεία του πίνακα."
saot-help = """
> Σημείωση: αν και μόνο μία τιμή K-V μπορεί να οριστεί με την παράμετρο `--saot`, μπορείτε να ορίσετε το δείκτη του πίνακα χρησιμοποιώντας άλλες επιλογές.

Παράδειγμα:
```sh
set test.toml -k mount --saot src "/sdcard/Download" --saot src "/data/media/0" --save --pre
```

```toml
[[mount]]
src = "/sdcard/Download"

[[mount]]
src = "/data/media/0"
```"""

table = "Κανονικός πίνακας (standard table), χρησιμοποιείται για να αποθηκεύσει πολλά ζευγάρια K-V."
table-help = """
Παράδειγμα 1:
```sh
set test.toml -k mount.1.test --map name sd --map os android
```

```toml
[[mount]]
src = "/data/media/0"

[mount.test]
name = "sd"
os = "android"
```

Παράδειγμα 2:
```sh
set test.yml -k container --tb arch riscv64 --tb os debian --tb codename trixie
```

```yaml
container:
  arch: riscv64
  codename: trixie
  os: debian
```"""

inline-table = "Εμφωλιασμένος πίνακας (inline table), αντιστοιχεί σε έναν πιο συμπυκνωμένο κανονικό πίνακα."
inline-table-help = """
Παράδειγμα:
```sh
set test.toml -k container --itb arch riscv64 --itb os fedora --itb codename rawhide
```

```toml
container = { arch = "riscv64", os = "fedora", codename = "rawhide" }
```

> Εκτός από το `toml`, όλες οι άλλες μορφές αρχείων θα χρησιμοποιήσουν έναν κανονικό πίνακα αντί για εμφωλιασμένο.

```json
"container": {
    "arch": "riscv64",
    "codename": "rawhide",
    "os": "fedora"
}
```"""

datetime = "Τύπος ημερομηνίας και ώρας"
datetime-help = """
Παράδειγμα:
```sh
set test.toml -k time --datetime '2023-04-16 09:14:44Z'
```

```toml
time = 2023-04-16T09:14:44Z
```

Αυτή η επιλογή υποστηρίζεται μόνο στο `toml`. Εάν προσθέσουμε `-t json` στο τέλος της εντολής, τότε θα φαίνεται κάπως έτσι:

```json
"time": {
    "$__toml_private_datetime": "2023-04-16T09:14:44Z"
}
```"""

none = "Διαγραφή ενός κλειδιού (key)"
none-help = """
> Σημείωση: το ron διαθέτει πραγματικό τύπο `Option<T>` με τιμές `Some(T)` ή `None`
> Η παράμετρος `--none` αφορά τη διαγραφή ενός κλειδιού (key), όχι το πραγματικό τύπο `Option<T>`.

Ας υποθέσουμε ότι η ακόλουθη λίστα πινάκων υπάρχει στο `test.yml`:

```yaml
bin:
- doc: false
  name: tomlyre
  path: src/main.rs
- doc: true
  name: test
  path: src/test.rs
```

Για να διαγράψουμε το `name: test`, μπορούμε να εκτελέσουμε:
```sh
set test.yml -k bin.1.name --none
```

> Σημείωση: Η κενή συμβολοσειρά και το None είναι διαφορετικά πράγματα.
> Με την κλήση `set test.yml --kv bin.1.name ""` μπορούμε να το ορίσουμε με κενή συμβολοσειρά, ενώ με την παράμετρο `--none` διαγράφουμε ολόκληρο το κλειδί.

Για να διαγράψουμε τον δεύτερο πίνακα του `bin` (με δείκτη 1), μπορούμε να εκτελέσουμε:
```sh
set test.yml -k bin.1 --none
```

Ή μπορούμε να χρησιμοποιήσουμε την παράμετρο `--rm`
```sh
set test.yml -k bin.1 --rm
```"""
