theme = "वर्ण संकेत उच्चारण के लिए थीम नाम निर्दिष्ट करें"
theme-help = """
जब केवल `-t` पैरामीटर का उपयोग किया जाता है, तो वर्तमान थीम की सूची दी जाएगी।
यदि थीम फ़ाइल निर्दिष्ट नहीं है, तो आंतरिक थीम संग्रह का उपयोग किया जाएगा।
यदि एक थीम ** ayu-dark ** मौजूद है, तो आप ` -t ayu-dark ` का उपयोग करके उसे उपयोग कर सकते हैं।
यदि थीम नाम में अंतरिक्ष शामिल हैं, तो कृपया उसे डबल कोट या सिंगल कोट में बंधने का प्रयास करें।

> टिप्पणी: `None` एक विशेष थीम है, जो कि कोई वर्ण संकेत उच्चारण नहीं है।

जब `--theme` विकल्प निर्दिष्ट नहीं होता है, तो डेटा को पर्याप्तता से पढ़ने के लिए एनवायरनमेंट वेरिएबल `$TOMLYRE_THEME` से पढ़ा जाएगा।
इस मदद जानकारी के **वर्ण संकेत उच्चारण** थीम भी इस **एनवायरनमेंट वेरिएबल** से आता है।

> डिफ़ॉल्ट मदद जानकारी हार्ड कोड होती है, जो त्वरित लोड होती है।
> हार्ड कोडेड पाठ लोड करना ` None` थीम टेक्स्ट लोड करने से एक ही स्तर के होते हैं, जबकि डायनामिक लोड दो स्तर या उससे अधिक धीमे होता है।
```
> `$TOMLYRE_THEME` एनवायरनमेंट वेरिएबल सेट करने से यह मदद जानकारी के थीम को फिर से लोड करने से शुरू हो सकता है, जो **अत्यधिक तेज़** प्रणाली शुरू करने की गति को कम कर सकता है।
> यदि आप मदद जानकारी के थीम में बदलाव करने का इरादा नहीं रखते हैं या वर्ण संकेत उच्चारण को अक्षम करने का इरादा नहीं रखते हैं, तो कृपया एनवायरमेंट वेरिएबल को संपादित करने की बजाय `-t` पैरामीटर का उपयोग करें।

एनवायरमेंट वेरिएबल का उपयोग करने का उदाहरण:
```sh
TOMLYRE_THEME="Monokai Extended" tomlyre --help
```

कमांड लाइन आधारित पैरामीटर का उपयोग करने का उदाहरण:
```sh
tomlyre -t "Monokai Extended" get test.toml
```

"conv/get/set" आदि हस्तक्षेपों के लिए खुद से निर्माण किए गए सामग्री के लिए, `-t` द्वारा निर्दिष्ट थीम की प्राथमिकता होगी> एनवायरमेंट वेरिएबल । यदि `-t` को नहीं बुलाया गया है, तो एनवायरमेंट वेरिएबल को पढ़ा जाएगा; यदि एनवायरमेंट वेरिएबल खाली है, तो ** Monokai Extended ** का उपयोग किया जाएगा।"""

theme-file = "अपनी थीम सेट का फ़ाइल, आपको उसके साथ `--theme` नाम निर्दिष्ट करने की आवश्यकता होगी"
theme-file-help = """
यह फ़ाइल rust crate 'syntect' द्वारा dump किए गए बाइनरी डेटा के समरूप है। 
मूल रूप से, ये थीम पुरानी संस्करण की sublime की थीम हैं।
यदि `--tf` निर्दिष्ट नहीं है, तो एनवायरमेंट वेरिएबल `$ TOMLYRE_THEME_FILE` का मूल्य पढ़ा जाएगा।"""

theme-uncompressed-file = "इस `theme-file` फ़ाइल की तुलना में uncompressed dump डेटा (फ़ाइल) आवश्यक है"

theme-uncompressed-file-help = """
> Uncompressed वर्जन Compressed वर्जन की तुलना में उच्चतम प्राथमिकता होती है।

यदि `--tuf` निर्दिष्ट नहीं है, तो एनवायरमेंट वेरिएबल `$ TOMLYRE_THEME_UNCOMPRESSED_FILE` का मूल्य पढ़ा जाएगा।"""

disable-theme-background = "थीम बैकग्राउंड अक्षम करें (डिफ़ॉल्ट रूप से सक्षम होता है, यदि `--dis-theme-bg` को कॉल किया गया होता है तो अक्षम होता है)"

disable-theme-background-help = """
यदि `--dis-theme-bg` निर्दिष्ट नहीं है, तो एनवायरमेंट वेरिएबल `$ TOMLYRE_THEME_BG` का मूल्य पढ़ा जाएगा।

यदि इस मान का मूल्य false है तो अक्षम होता है

```sh
env TOMLYRE_THEME_BG=false TOMLYRE_THEME="ayu-dark" tomlyre --help
```"""
table-style = "टेबल के स्टाइल को निर्दिष्ट करें"
table-style-help = """
`--ts` पैरामीटर का उपयोग करते हुए, केवल अंतर्निहित शैली सेट को लिस्ट किया जाएगा।
मार्कडाउन को md के रूप में छोटा किया जा सकता है, लेकिन अन्य शैलियों को पूरी नाम की आवश्यकता होगी।
उपयोग उदाहरण1: `--ts md`
उपयोग उदाहरण2: `--table-style ascii`

नोट: फ़ाइल से **टेबल स्टाइल** सेट पढ़ना वर्तमान में समर्थित नहीं है, यदि आपको इस सुविधा या अन्य अतिरिक्त सुविधाओं की आवश्यकता है, तो आप issue सबमिट कर सकते हैं।"""

from-format = "स्रोत फ़ाइल प्रारूप (डिफ़ॉल्ट रूप से स्वचालित रूप से जाँच किया जाएगा)"
from-format-help = """
stdin से डेटा पढ़ने के लिए, जैसे: `cat a | tomlyre conv -`, यह फ़ाइल प्रारूप स्वचालित रूप से जानने का प्रयास करेगा।
हालांकि, स्वचालित जाँच विफल हो सकती है, इस स्थिति में आपको प्रारूप को मैनुअल रूप से निर्दिष्ट करना होगा।
उदाहरण: `cat test.bson | tomlyre --src-fmt bson get -`"""

shell-completion = "शैली के लिए पूर्णता स्क्रिप्ट उत्पन्न करें"
shell-completion-help = """
आपको पूर्णता स्क्रिप्ट उत्पन्न करने के लिए शैली का नाम मैनुअल रूप से निर्दिष्ट करना होगा।
उदाहरण के लिए, Windows पर powershell के लिए आप इस्तेमाल कर सकते हैं: `--sh-comp pwsh`

> प्रश्न: शेल का पूरक क्या होता है?

> उत्तर: जब हम कमांड लाइन में कमांड टाइप करते हैं तो, अगर हम Tab कुंजी दबाते हैं तो पूरक स्क्रिप्ट ट्रिगर हो जाता है, जो संभवतः पूरक विकल्पों को खोजना शुरू करता है और इन विकल्पों को चुनने के लिए प्रस्तुत करता है। यह सुविधा कमांड लाइन इनपुट की दक्षता और सटीकता को बढ़ा सकती है।

विभिन्न शेल के पूरक स्क्रिप्ट के स्थान भिन्न होते हैं। zsh के लिए, आपको इसे `$fpath` अरे में शामिल निर्देशित पथ में रखना होगा।
आप `print -l $fpath` का उपयोग करके इस अरे की सामग्री प्राप्त कर सकते हैं।
मान लीजिए कि इसमें `/usr/local/share/zsh/site-functions` निर्देशितिका शामिल है, तो आप निम्नलिखित कमांड का उपयोग करके `_tomlyre` फ़ाइल में इस निर्देशिका में पूरक स्क्रिप्ट लिख सकते हैं।

```sh
tomlyre --sh-comp zsh | doas tee /usr/local/share/zsh/site-functions/_tomlyre
```

रूट के अधिकारों का उपयोग बचने के लिए, आप इसे उपयोगकर्ता उपनिर्देशित निर्देशिका में रख सकते हैं। उदाहरण के लिए, आप इस अरे के सिरे में एक तत्व डालने और संबंधित निर्देशिका का उपयोग कर सकते हैं।

```zsh
fpath=(~/.local/share/zsh/completions $fpath)
```"""
