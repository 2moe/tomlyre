theme = "指定されたシンタックスハイライトのテーマ名"
theme-help = """
`-t` パラメータだけを使用する場合、現在のテーマのリストが表示されます。
テーマファイルが指定されていない場合、組み込みのテーマセットが使用されます。
例えば、**ayu-dark** というテーマがある場合、`-t ayu-dark` を使用してそのテーマを使用できます。
テーマ名に空白が含まれている場合は、ダブルクォートまたはシングルクォートで囲む必要があります。

> 注： `None` という特殊なテーマがあります。これは、シンタックスハイライトのない純テキストスタイルを表します。

`--theme` オプションが指定されていない場合、データは環境変数 `$TOMLYRE_THEME` から読み取られます。
このヘルプ情報の **シンタックスハイライト** テーマも、この **環境変数** から読み取られます。

> デフォルトのヘルプ情報はハードコーディングされており、読み込み速度が非常に速いです。
> ハードコーディングされたテキストを読み込む速度と `None` テーマのテキストを読み込む速度は同じですが、動的に読み込む場合は2桁以上遅くなります。
> `TOMLYRE_THEME` 環境変数を設定すると、テーマが再度読み込まれるため、起動速度が **著しく** 遅くなります。
> テーマを変更するか、シンタックスハイライトを無効にする場合を除き、環境変数を変更する代わりに `-t` パラメータを使用してください。

環境変数を使用した例：
```sh
TOMLYRE_THEME="Monokai Extended" tomlyre --help
```

コマンドライン引数を使用した例:
```sh
tomlyre -t "Monokai Extended" get test.toml
```

手動で `conv/get/set` などの操作を実行した場合の出力については、`-t` で指定されたテーマ > 環境変数の優先順位があります。
`-t` が呼び出されない場合、環境変数が読み取られます。環境変数が空の場合は、**Monokai Extended** が使用されます。"""

theme-file = "カスタムテーマセットファイル。 `--theme` でテーマ名を指定する必要があります"
theme-file-help = """
サポートされているファイル形式は、rust crate `syntect` がダンプしたバイナリデータです。
本質的に、これらのテーマは古い版の sublime のテーマです。
`--tf` が指定されていない場合、環境変数 `$TOMLYRE_THEME_FILE` の値が読み取られます。"""

theme-uncompressed-file = "`theme-file` に似ていますが、圧縮されていない dump データ(ファイル)が必要です"

theme-uncompressed-file-help = """
> 未圧縮のバージョンは、圧縮バージョンよりも優先されます。

`--tuf` が指定されていない場合は、環境変数 `$TOMLYRE_THEME_UNCOMPRESSED_FILE` の値が読み込まれます。"""

disable-theme-background = "テーマ背景を無効にする（デフォルトは有効ですが、 `--dis-theme-bg` を使用して無効化できます）"

disable-theme-background-help = """
`--dis-theme-bg` が指定されていない場合は、環境変数 `$TOMLYRE_THEME_BG` の値が読み込まれます。

値が false の場合は無効になります。

```sh
env TOMLYRE_THEME_BG=false TOMLYRE_THEME="ayu-dark" tomlyre --help
```"""

table-style = "表のスタイルを指定します"
table-style-help = """
`--ts` のパラメーターだけで使用する場合は、組み込みのスタイルのセットが表示されます。
markdown 以外は md に省略形があります。
現在、**テーブルスタイル** のコレクションをファイルから読み取る機能はサポートされていません。 追加の機能が必要な場合は、issueを提出してフィードバックしてください。"""

from-format = "ソースファイルの形式を手動指定する（デフォルトは自動判別）"
from-format-help = """
stdin からデータを読み取る場合、例： `cat a | tomlyre conv -`、それは最初にファイル形式を自動的に判断しようとします。
ただし、自動判断が失敗する場合があります。その場合、手動で形式を指定する必要があります。
例：`cat test.bson | tomlyre --src-fmt bson get -`"""

shell-completion = "シェルの補完スクリプトを生成します"
shell-completion-help = """
補完スクリプトを生成するために、シェルの名前を手動で指定する必要があります。
たとえば、Windows 上の PowerShell の場合、 `--sh-comp pwsh` を使用できます。

> Q. 何が shell の補完機能ですか？

> A: コマンドラインにコマンドを入力している時、Tabキーを押すと、補完スクリプトがトリガーされ、可能性のある補完オプションが検索され、これらのオプションが選択できるように表示されます。この機能は、コマンドライン入力の効率と正確性を大幅に向上させることができます。

異なるシェルの補完スクリプトは、保存される場所が異なります。zsh の場合、 `$fpath` 配列に含まれるパスに保存する必要があります。
`print -l $fpath` を使用して、この配列の内容を取得できます。
たとえば、 `/usr/local/share/zsh/site-functions` ディレクトリが含まれているとします。その場合、次のコマンドを使用して、補完スクリプトを `_tomlyre` ファイルに書き込むことができます。

```sh
tomlyre --sh-comp zsh | doas tee /usr/local/share/zsh/site-functions/_tomlyre
```

root 権限を使用しないようにするために、ユーザのサブディレクトリに配置することもできます。たとえば、次のコマンドを使用して、配列の先頭に要素を挿入し、関連するディレクトリを使用できます。
```zsh
fpath=(~/.local/share/zsh/completions $fpath)
```"""
