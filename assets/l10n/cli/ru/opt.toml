get-opts = "Получить значение определенной настройки"
get-opts-help = """
Пример использования 1: `get Cargo.toml -k package.name`
Пример использования 2: `get cfg.yaml -k .`
"""
key = "Запрос значения по ключу"

key-help = """
Формат ключа: "a.b.c", где "." используется для указания подтаблицы или индекса массива.
Если при запросе ключа задать только одну точку ".", то будут перечислены все таблицы."""

set-opts = "Создание/обновление/удаление структуры файла настроек"
set-opts-help = """
# set

Сначала выберите ключ, а затем измените его, задав тип данных значения.

> Если вы предоставляете только ключ, а не значение, то будут перечислены соответствующие типы данных и значения.
> Например, `set Cargo.toml -k package` выведет таблицу package и ее дочерних таблиц и предоставит более подробную информацию, чем `get`.

## Примеры

### Пример 1:
```sh
--ts md set test.toml --key package.edition --str 2021
```

Поскольку указано `--str`, а не `--int`, "2021" является строковым значением, а не целочисленным.

| package | новое значение |
|---------|-----------|
| edition | "2021"    |


```toml
[package]
edition = "2021"
```

### Пример 2:
```sh
set ~/.config/Code/User/settings.json --ck remote.SSH.remotePlatform --ck test --map k1 v1 --to /tmp/code.yaml
```

```yaml
remote.SSH.remotePlatform:
  test:
    k1: v1
```

### Пример 3:
```sh
set test.yml -k main -a hello -a wonderful -a world --pre --to ron --save
```

```ron
"main": [
  /*[0]: это первый индекс*/ "hello",
  /*[1]*/ "wonderful",
  /*[2]*/ "world",
]
```

> Примечание: примеры начинаются с аргумента/подкоманды, опуская имя корневой команды для краткости.

"""

set-kv = "Установить пару ключ-значение, `--kv x.y.z value` эквивалентно`-k x.y.z -s value`"

set-key = """Выбрать указанный ключ (ключ), используя "." в качестве разделителя"""

concat-key = """Ввод key по частям, результат будет автоматически объединен без использования "." в качестве разделителя"""
concat-key-help = """
В отличие от `-k`, `--ck` не разбивает ключ на подстроки с помощью `split('.')`.

Для [a.b.c] `-k a.b.c` и `--ck a --ck b --ck c` эквивалентны.
Для простых случаев использование `-k` будет удобнее.

Если имя ключа содержит "." , то в таком случае используйте `--ck` вместо `-k`.
Например:

```json
"[typescript]": {
    "editor.defaultFormatter": "rome.rome"
}
```

В этой структуре "editor.defaultFormatter" - это полная строка, а "defaultFormatter" не является подключением (sub-key) "editor".

При использовании `-k '[typescript]'.'editor.defaultFormatter'` он разделится на:

- "[typescript]"
- "editor"
- "defaultFormatter"

А при использовании `--ck '[typescript]' --ck editor.defaultFormatter`, он будет интерпретирован как:

- "[typescript]"
- "editor.defaultFormatter"

Последний вариант является корректной структурой. """

preview = "Просмотр полного файла после внесения изменений"
string = "String (строковый тип)"
bool = "bool (булевый тип), может быть только `true` или `false`"
num = "i64: 64-битное знаковое целочисленное значение, например: 1145"
f64 = "Двойная точность с плавающей запятой (стандарт IEEE 754-2008), например: 3.14159265359"

set-save-to-help = """
Очень похож на `-t` из подкоманды `conv`, но отличие заключается в том, что `-t` из `conv` можно вызывать многократно, чтобы вывести в несколько форматов/файлов. 
Тогда как `-t` из `set` вызывается только один раз и выводит в один файл.

> Примечание: после выполнения операции преобразования в `conv`, все файлы теряют свои комментарии.
> В то время как `set` сохраняет комментарии **только** для формата **toml**, а все остальные форматы **не** сохраняют комментарии.

- Если параметр `-t` не вызывается, то использование `--save` перезаписывает файл.
- Если уже был вызван `-t`, и далее вызывается `--save`, то измененный файл будет сохранен в файл, на который указывает `-t`.
- Если исходный файл и файл, на который указывает `-t`, отличаются, то поведение параметра `-t` из подкоманды `set` будет аналогичным `-t` из подкоманды `conv`. В этом случае у них есть возможность автоматически переименовать файлы, кроме тех, которые являются конкретными путями к файлам.
  - Предположим, что from: **test.yml**, to: **json**, тогда выходной файл станет **test.json**, а не **json**
  - Если вам не нужна эта функция, используйте `-t ./json` или `-t $PWD/json`, а не `-t json`.
"""

set-save = "Если вызывается без параметра `--to`, то перезаписывает(записывает) текущий файл"
set-save-to = "Сохранить в указанном формате/файле, одновременно можно сохранить только один формат"
array = "Массив строк"
array-help = """
Установка элементов массива производится через многократный вызов параметра `-a`.
Пример:
```sh
set test.toml -k test.array -a hello -a wonderful -a world
```

> Первый вызов устанавливает элемент с индексом 0, второй - элемент с индексом 1 и так далее.

```toml
[test]
array = ["hello", "wonderful", "world"]
```"""

num-arr = "Массив i64"
num-arr-help = """
Пример:
```sh
set test.json -k hello --na -1 --na -45 --na 14
```

```json
"hello": [
    -1,
    -45,
    14
]
```"""

f64-arr = "Массив f64"
f64-arr-help = """
Пример:
```sh
set test.yml -k hello --fa 3.14 --fa 45e-2 --fa NaN --fa Inf
```
```yaml
hello:
- 3.14
- 0.45
- .nan
- .inf
```

> Формат JSON 1.0 не поддерживает NaN и Inf.
> Он выводит `null`, а не `NaN`.

```sh
set test.yml -k zz --fa NaN --fa Inf --to json --pre
```

```json
"zz": [
    null,
    null
]
```
"""
bool-arr = "Массив bool"

bool-arr-help = """
Пример:
```sh
set test.ron -k hello --ba true --ba false --ba true
```

```ron
"hello": [
    // [0]: Первый элемент - true
    true,
    /*[1]*/ false,
    /*[2]*/ true,
]
```"""

aot = "Массив таблиц (использование: `--aot 'k1, v1, k2, v2' --aot 'k1, v1'`)"
aot-help = """
Пример:
```sh
set test.toml -k package --aot 'name, glossa, version, 0.0.1-alpha.6' --aot 'name, wasm-bindgen, ver sion, 0.2  .84,  version, 0.2.84'
```

```toml
[[package]]
name = "glossa"
version = "0.0.1-alpha.6"

[[package]]
name = "wasm-bindgen"
"ver sion" = "0.2  .84"
version = "0.2.84"
```"""

saot = "Таблица с одной парой ключ-значение (использование: `--saot k1 v1 --saot k2 v2...`)"
saot-help = """
> Примечание: хотя через `--saot` можно создать только одну пару K-V для каждой таблицы, вы можете указать индексы массива таблиц заранее и расширить их с помощью других параметров.

Пример:
```sh
set test.toml -k mount --saot src "/sdcard/Download" --saot src "/data/media/0" --save --pre
```

```toml
[[mount]]
src = "/sdcard/Download"

[[mount]]
src = "/data/media/0"
```"""

table = "Стандартная таблица (standard table), используется для хранения множества пар K-V"
table-help = """
Пример 1:
```sh
set test.toml -k mount.1.test --map name sd --map os android
```

```toml
[[mount]]
src = "/data/media/0"

[mount.test]
name = "sd"
os = "android"
```

Пример 2:
```sh
set test.yml -k container --tb arch riscv64 --tb os debian --tb codename trixie
```

```yaml
container:
  arch: riscv64
  codename: trixie
  os: debian
```"""

inline-table = "Встроенная таблица, эквивалентна более компактной стандартной таблице"
inline-table-help = """
Пример:
```sh
set test.toml -k container --itb arch riscv64 --itb os fedora --itb codename rawhide
```

```toml
container = { arch = "riscv64", os = "fedora", codename = "rawhide" }
```

> За исключением `toml`, другие форматы будут использовать стандартную таблицу вместо встроенной.

```json
"container": {
    "arch": "riscv64",
    "codename": "rawhide",
    "os": "fedora"
}
```"""

datetime = "Дата и время"

datetime-help = """
Пример:
```sh
set test.toml -k time --datetime '2023-04-16 09:14:44Z'
```

```toml
time = 2023-04-16T09:14:44Z
```

Этот параметр доступен только в формате `toml`. Если мы добавим `-t json` в конце команды, то результат будет выглядеть так:

```json
"time": {
    "$__toml_private_datetime": "2023-04-16T09:14:44Z"
}
```"""

none = "Удалить указанный ключ"

none-help = """
> Примечание: в `ron` есть настоящий тип `Option<T>`, который может быть либо `Some(T)`, либо `None`.
> Здесь `--none` означает удаление указанного ключа, а не настоящий тип `Option<T>`.

Предположим, что у нас есть следующий массив таблиц в `test.yml`:

```yaml
bin:
- doc: false
  name: tomlyre
  path: src/main.rs
- doc: true
  name: test
  path: src/test.rs
```

Чтобы удалить **name: test**, мы можем выполнить следующую команду:
```sh
set test.yml -k bin.1.name --none
```

> Примечание: пустая строка и `None` - это не одно и то же.
> Вызов `set test.yml --kv bin.1.name ""` установит значение ключа на пустую строку, а `--none` удалит ключ целиком.

Чтобы удалить вторую таблицу массива `bin` (с индексом 1), мы можем выполнить:
```sh
set test.yml -k bin.1 --none
```

Или использовать `--rm`
```sh
set test.yml -k bin.1 --rm
```"""
