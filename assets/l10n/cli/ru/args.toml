theme = "Название темы, определяющей подсветку синтаксиса"
theme-help = """
Если использовать только параметр `-t`, то будет выведен список доступных тем.
Если не указан файл темы, то будет использоваться встроенный набор тем.
Если существует тема **ayu-dark**, то можно использовать `-t ayu-dark` для выбора этой темы.
Если название темы содержит пробелы, то ее нужно заключить в двойные или одинарные кавычки.

> Примечание: есть специальная тема `None`, которая обозначает отсутствие подсветки синтаксиса для чистого текста.

Если опция `--theme` не указана, то она будет прочитана из переменной окружения `$TOMLYRE_THEME`.
Тема подсветки синтаксиса в этом справочном сообщении также происходит из этой **переменной окружения**.

> Стандартное справочное сообщение закодировано жестко, поэтому оно загружается очень быстро.  
> Загрузка кодированного текста и загрузка текста без подсветки синтаксиса `None` выполняются с одинаковой скоростью, а динамическая загрузка будет медленнее на два и более порядков.  
> Установка переменной окружения `$TOMLYRE_THEME` может привести к перезагрузке темы, что **сильно** замедлит скорость запуска.  
> Если вы не собираетесь изменять тему подсветки для сообщений о помощи или отключать подсветку синтаксиса, то используйте `-t`, а не изменяйте переменную окружения.

Пример использования переменной окружения:
```sh
TOMLYRE_THEME="Monokai Extended" tomlyre --help
```

Пример использования параметров командной строки:
```sh
tomlyre -t "Monokai Extended" get test.toml
```

Для вывода содержимого, получаемого при ручном выполнении операций "conv/get/set" и т. д., приоритет имеет тема, определенная посредством `-t`, а затем переменная окружения.
Если не вызывать `-t`, то будет использоваться переменная окружения. Если значение переменной окружения пусто, то будет использоваться тема **Monokai Extended**."""

theme-file = "Файл, содержащий пользовательские темы. Пользователь должен указать также имя темы через `--theme`"
theme-file-help = """
Поддерживаемый формат файлов - двоичные данные, созданные в результате выполнения dump-операции из библиотеки rust crate `syntect`.
Такие темы в основном представляют собой темы для старых версий Sublime.
Если параметр `--tf` не указан, то будет прочитано значение переменной окружения `$TOMLYRE_THEME_FILE`."""

theme-uncompressed-file = "Файл, содержащий пользовательские темы в негруппированном формате (не сжатый файл)"

theme-uncompressed-file-help = """
> Несжатые версии имеют более высокий приоритет, чем сжатые.

Если параметр `--tuf` не указан, то будет прочитано значение переменной окружения `$TOMLYRE_THEME_UNCOMPRESSED_FILE`."""
disable-theme-background = "Отключить фон для темы (по умолчанию включено, если использовать `--dis-theme-bg`, то будет отключено)"

disable-theme-background-help = """
Если не указан параметр `--dis-theme-bg`, то он будет прочитан из переменной окружения `$TOMLYRE_THEME_BG`.

Если значение равно `false`, то фон отключен.

```sh
env TOMLYRE_THEME_BG=false TOMLYRE_THEME="ayu-dark" tomlyre --help
```"""

table-style = "Определение стиля таблицы"
table-style-help = """
Если использовать параметр `--ts` без дополнительных значений, то будут выведены доступные стили таблиц.
За исключением markdown, который можно сократить как md, остальные стили должны быть записаны полностью.
Пример использования 1:`--ts md`
Пример использования 2: `--table-style ascii`

Примечание: в настоящее время невозможно загрузить коллекцию **стилей таблиц** из файла. Если вам нужна эта функция или что-то еще, пожалуйста, сообщите об этом, создав issue."""

from-format = "Ручное определение формата исходного файла (обычно автоматически определяется)"
from-format-help = """
Когда данные читаются из stdin, например: `cat a | tomlyre conv -`, система автоматически пытается определить формат файла.
Однако автоматическое определение может завершиться неудачей, в таком случае вы должны указать формат вручную.
Пример использования: `cat test.bson | tomlyre --src-fmt bson get -`"""

shell-completion = "Создание сценария для автодополнения оболочки"
shell-completion-help = """
Необходимо вручную указать имя используемой оболочки для генерации скрипта автодополнения.
Например, для powershell на Windows можно использовать: `--sh-comp pwsh`

> Q: Что такое автодополнение в оболочке?

> A: Когда мы вводим команду в командной строке и нажимаем клавишу Tab, запускается скрипт автодополнения, который начинает поиск возможных вариантов автодополнения и отображает их для выбора. Эта функция значительно повышает эффективность и точность ввода команд.

Скрипты автодополнения различных оболочек располагаются в разных местах. Для zsh необходимо поместить скрипт в путь, указанный в массиве `$fpath`.
Вы можете использовать `print -l $fpath`, чтобы получить содержимое этого массива.
Предположим, что он содержит каталог `/usr/local/share/zsh/site-functions`. Тогда вы можете использовать следующую команду, чтобы записать скрипт автодополнения в файл `_tomlyre` в этом каталоге.

```sh
tomlyre --sh-comp zsh | doas tee /usr/local/share/zsh/site-functions/_tomlyre
```

Чтобы избежать использования прав root, вы можете поместить его в подкаталог пользователя. Например, вы можете использовать следующую команду, чтобы добавить новый элемент в начало массива:
```zsh
fpath=(~/.local/share/zsh/completions $fpath)
```"""
