get-opts = "지정된 구성 항목의 값(value)을 가져옵니다."
get-opts-help = """
사용 방법 예1：`get Cargo.toml -k package.name`
사용 방법 예2：`get cfg.yaml -k .`
"""
key = "key(키)를 사용하여 value(값)를 검색합니다."

key-help = """
형식: "a.b.c", 하위 테이블 이름 또는 배열 인덱스는 "."(점)으로 연결됩니다.
"." 만 제공하는 경우 전체 테이블을 표시합니다."""

set-opts = "구성 파일의 구조를 만들거나 업데이트하거나 삭제합니다."
set-opts-help = """
# set

지정된 key로 이동한 다음 지정된 데이터 유형의 값을 수정합니다.

> value가 지정되지 않은 경우, 해당 데이터 유형과 값을 나열합니다.
> 예: `set Cargo.toml -k package`를 사용하면 패키지 및 하위 테이블의 테이블이 나열되며 `get`보다 자세한 정보가 제공됩니다.

## Examples

### 예시1：
```sh
--ts md set test.toml --key package.edition --str 2021
```

`--str`이 `--num` 대신 지정되었으므로 "2021"은 정수 타입이 아닌 문자열 타입입니다.

| package | new value |
|---------|-----------|
| edition | "2021"    |


```toml
[package]
edition = "2021"
```

### 예시2：
```sh
set ~/.config/Code/User/settings.json --ck remote.SSH.remotePlatform --ck test --map k1 v1 --to /tmp/code.yaml
```

```yaml
remote.SSH.remotePlatform:
  test:
    k1: v1
```

### 예시3：
```sh
set test.yml -k main -a hello -a wonderful -a world --pre --to ron --save
```

```ron
"main": [
  /*[0]: 이것은 첫 번째 인덱스입니다.*/ "hello",
  /*[1]*/ "wonderful",
  /*[2]*/ "world",
]
```

> 注：위의 예는 매개 변수(argument)/서브 명령(sub-command)로 시작하여 루트 명령 이름을 생략하였습니다. 실제 작업에서는 수동으로 추가해야 합니다."""

set-kv = "k-v 쌍(k-v pair)을 설정합니다. `--kv x.y.z value`는 `-k x.y.z -s value`와 동일합니다."

set-key = """지정된 key(키)를 선택합니다. "."을 구분 기호로 사용합니다."""

concat-key = """키(key)를 분할하여 입력하면 결과가 자동으로 연결됩니다. 구분 기호 "."을 사용하지 않습니다."""
concat-key-help = """
`-k`와 달리 `--ck`는 `split('.')`를 자동으로 수행하지 않습니다.
[a.b.c]와 같은 경우, `-k a.b.c`와 `--ck a --ck b --ck c`는 동일합니다. 
간단한 경우에는 `-k`를 사용하는 것이 더 간편합니다.

키 이름에 '.'이 포함되어 있으면 `-k` 대신 `--ck`를 사용하세요.
예: 

```json
"[typescript]": {
    "editor.defaultFormatter": "rome.rome"
}
```

이 구조에서 "editor.defaultFormatter"는 전체 문자열입니다. `defaultFormatter`는 `editor`의 하위 키(sub-key)가 아닙니다.

`-k '[typescript]'.'editor.defaultFormatter'`를 사용하면 키가 다음과 같이 분할됩니다.

- "[typescript]"
- "editor"
- "defaultFormatter"

반면, `--ck '[typescript]' --ck editor.defaultFormatter`는 다음과 같이 키를 처리합니다.

- "[typescript]"
- "editor.defaultFormatter"

후자가 올바른 구조입니다."""

preview = "수정 후 전체 파일 미리보기"
string = "String(문자열 유형)"
bool = "bool (불리언 유형)으로, `true` 또는 `false`만 사용할 수 있습니다."
num = "i64: 64 비트 부호 있는 정수 유형입니다. 예시: 1145"
f64 = "배정밀도 부동 소수점 숫자 (IEEE 754-2008 표준)로, 예시: 3.14159265359"

set-save-to-help = """
`conv` 하위 명령어의 `-t`와 매우 유사하지만 가장 큰 차이점은 `conv`가 `-t`를 여러 번 연속 호출하여 다양한 형식/여러 파일로 출력할 수 있지만 `set` 하위 명령어의 `-t`는 한 번만 호출하고 단일 파일로 출력합니다.

> 참고: `conv` 하위 명령어는 변환 작업을 완료한 후 모든 형식의 파일에서 주석을 유지하지 않습니다.
> 반면에 `set` 하위 명령어는 **toml**을 제외하고 모든 형식의 주석을 유지합니다.

- `-t`를 호출하지 않은 상태에서 `--save`를 호출하면 자신을 덮어쓰게 됩니다.
- 이미 `-t`를 호출하고 `--save`도 호출한 경우 수정된 파일은 `-t`가 지정한 파일에 저장됩니다.
- 소스 파일과 `-t`가 지정한 파일이 동일하지 않은 경우, `set` 하위 명령어의 `-t` 동작은 `conv`의 `-t`와 유사해지며, 구체적인 파일 경로에 대해서만 자동으로 이름을 바꿉니다.
  - 예를 들어 from: **test.yml**, to: **json** 인 경우, 출력 파일은 **test.json**이 되고 **json**이 아닙니다.
  - 이 기능이 필요하지 않은 경우 `-t ./json` 또는 `-t $PWD/json`을 사용하십시오. `-t json`이 아닙니다"""

set-save = "현재 파일을 덮어쓰기(overwrite)합니다. `--to`와 함께 사용되지 않은 경우"
set-save-to = "지정된 형식/파일로 저장하며, 한 번에 하나의 파일만 저장할 수 있습니다."
array = "문자열 배열"
array-help = """
여러번의 `-a` 호출을 통해 배열 요소를 설정합니다.
예제:
```sh
set test.toml -k test.array -a hello -a wonderful -a world
```

> 첫 번째 호출은 인덱스 0의 요소를 설정하고 두 번째 호출은 인덱스 1의 요소를 설정합니다.

```toml
[test]
array = ["hello", "wonderful", "world"]
```"""

num-arr = "i64 배열"
num-arr-help = """
예제:
```sh
set test.json -k hello --na -1 --na -45 --na 14
```

```json
"hello": [
    -1,
    -45,
    14
]
```"""

f64-arr = "f64 배열"
f64-arr-help = """
예제:
```sh
set test.yml -k hello --fa 3.14 --fa 45e-2 --fa NaN --fa Inf
```

```yaml
hello:
- 3.14
- 0.45
- .nan
- .inf
```

> JSON 1.0은 NaN과 Inf를 지원하지 않습니다.

`null`이 출력됩니다.

```sh
set test.yml -k zz --fa NaN --fa Inf --to json --pre
```

```json
"zz": [
    null,
    null
]
```
"""

bool-arr = "boolean 배열"

bool-arr-help = """
예시:
```sh
set test.ron -k hello --ba true --ba false --ba true
```

```ron
"hello": [
    // [0]: 첫 번째 요소는 참(true)입니다.
    true,
    /*[1]*/ false,
    /*[2]*/ true,
]
```"""

aot = "테이블 배열(사용법: `--aot 'k1, v1, k2, v2' --aot 'k1, v1'`)"
aot-help = """
예시:
```sh
set test.toml -k package --aot 'name, glossa, version, 0.0.1-alpha.6' --aot 'name, wasm-bindgen, ver sion, 0.2  .84,  version, 0.2.84'
```

```toml
[[package]]
name = "glossa"
version = "0.0.1-alpha.6"

[[package]]
name = "wasm-bindgen"
"ver sion" = "0.2  .84"
version = "0.2.84"
```"""

saot = "하나의 key-value 쌍만 저장하는 테이블 배열 (사용법: `--saot k1 v1 --saot k2 v2...`)"
saot-help = """
> 참고: `--saot`을 사용하여 각 테이블에 대해 하나의 K-V pair만 지정할 수 있지만 다른 옵션을 사용하여 테이블 배열 인덱스를 먼저 지정하고 확장할 수 있습니다.

예시:
```sh
set test.toml -k mount --saot src "/sdcard/Download" --saot src "/data/media/0" --save --pre
```

```toml
[[mount]]
src = "/sdcard/Download"

[[mount]]
src = "/data/media/0"
```"""

table = "여러 개의 K-V 쌍을 저장하는 데 사용되는 표준 테이블입니다."
table-help = """
예시1:
```sh
set test.toml -k mount.1.test --map name sd --map os android
```

```toml
[[mount]]
src = "/data/media/0"

[mount.test]
name = "sd"
os = "android"
```

예시2:
```sh
set test.yml -k container --tb arch riscv64 --tb os debian --tb codename trixie
```

```yaml
container:
  arch: riscv64
  codename: trixie
  os: debian
```"""

inline-table = "인라인 테이블, 보다 간결한 표준 테이블"
inline-table-help = """
예시:
```sh
set test.toml -k container --itb arch riscv64 --itb os fedora --itb codename rawhide
```

```toml
container = { arch = "riscv64", os = "fedora", codename = "rawhide" }
```

> `toml` 이외의 다른 형식에서는 인라인 테이블 대신 표준 테이블을 사용합니다.

```json
"container": {
    "arch": "riscv64",
    "codename": "rawhide",
    "os": "fedora"
}
```"""

datetime = "날짜 및 시간 유형"
datetime-help = """
예시:
```sh
set test.toml -k time --datetime '2023-04-16 09:14:44Z'
```

```toml
time = 2023-04-16T09:14:44Z
```

이 옵션은 `toml` 만 지원하며, 명령 끝에 `-t json`을 추가하면 다음과 같이 표시됩니다.

```json
"time": {
    "$__toml_private_datetime": "2023-04-16T09:14:44Z"
}
```"""

none = "지정된 키를 삭제"

none-help = """
> 참고: ron에는 실제로 `Option<T>` 타입이 있으며 값은 `Some(T)` 또는 `None`입니다.
> 여기서 `--none`은 실제 `Option<T>` 타입이 아닌 지정된 키를 삭제하는 것을 의미합니다.

test.yml에 다음과 같은 표 배열이 있다고 가정해 봅시다:

```yaml
bin:
- doc: false
  name: tomlyre
  path: src/main.rs
- doc: true
  name: test
  path: src/test.rs
```

우리는 **name: test**를 삭제하려면 다음을 실행할 수 있습니다.
```sh
set test.yml -k bin.1.name --none
```

> 참고: 빈 문자열과 None은 다릅니다.
> `set test.yml --kv bin.1.name ""`를 호출하면 빈 문자열로 설정됩니다.`--none`은 전체 키가 제거됩니다.

두 번째 표 (인덱스 1)를 제거하려면 다음을 실행하면 됩니다.
```sh
set test.yml -k bin.1 --none
```

또는 `--rm`을 사용하여 삭제할 수 있습니다.
```sh
set test.yml -k bin.1 --rm
```"""
